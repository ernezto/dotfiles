" Disable plugins accordingly
let g:pathogen_disabled = []
if v:version < 703
  call add(g:pathogen_disabled, 'numbers.vim')
endif

" Initialize pathogen.
execute pathogen#infect()

" Personal preferences
let mapleader = " "
let g:NERDTreeWinSize = 60
set modeline
set number
set expandtab
set tabstop=2
set shiftwidth=2
set autoindent
set smartindent
set cursorline
set iskeyword+=-
set t_ut=

" Older versions don't support colorcolumn
if exists('+colorcolumn')
  set colorcolumn=80
endif

" Close vim if NERDTree is the only window left open.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" http://vimcasts.org/episodes/tidying-whitespace/
function! <SID>StripTrailingWhitespaces()
  let _s=@/
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  let @/=_s
  call cursor(l, c)
endfunction

" Personal key bindings and commands.
map ; :
noremap ;; ;
map Q :q<CR>
map <C-n> :NERDTreeToggle<CR>
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-t>     <Esc>:tabnew<CR>

let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-g>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_exit_from_visual_mode=0
let g:multi_cursor_exit_from_insert_mode=0

" Pasting code.
" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Reindent the whole file
" http://vim.wikia.com/wiki/Fix_indentation
map <F7> mzgg=G`z<CR>

" Save using Ctrl-s
" http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files
command! -nargs=0 -bar Update if &modified
                           \|    if empty(bufname('%'))
                           \|        browse confirm write
                           \|    else
                           \|        confirm write
                           \|    endif
                           \|endif
nnoremap <silent> <C-s> :<C-u>Update<CR>
inoremap <C-s> <Esc>:Update<CR>

" Display wrapped text nicely.
" http://vimcasts.org/episodes/soft-wrapping-text/
set nowrap nolinebreak list
nnoremap <F4> :set wrap! linebreak! nolist! wrap?<CR>
imap <F4> <C-o><F4>

" Navigating through wrapped text.
" http://vim.wikia.com/wiki/Move_cursor_by_display_lines_when_wrapping
noremap <silent> k gk
noremap <silent> j gj

" Set default colorscheme.
colorscheme monokai

" Vim-airline config
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_powerline_fonts = 1
let g:airline_theme = "powerlineish"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
set noshowmode

" Vim-gitgutter config
let g:gitgutter_sign_column_always = 1

" Emmet config
let g:user_emmet_settings = {
  \  'haml' : {
  \    'filters' : 'haml',
  \  },
  \}

" CtrlP config
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" SuperTab config
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
autocmd FileType *
  \ if &omnifunc != '' |
  \   call SuperTabChain(&omnifunc, "<c-n>") |
  \   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
  \ endif

" Syntastic config
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_disabled_filetypes = ['html']
let g:syntastic_javascript_checkers = ['jshint', 'jscs']
let g:syntastic_javascript_jsxhint_exec = 'jsx-jshint-wrapper'
autocmd BufRead,BufNewFile *.jsx let b:syntastic_checkers = ['jsxhint']
